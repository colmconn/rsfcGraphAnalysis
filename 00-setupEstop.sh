#!/bin/bash

trap exit SIGHUP SIGINT SIGTERM

#set -x 

taskDir=rsfcGraphAnalysis
task=ESTOP

dataRoot="/data/sanDiego"
scriptsDir="/data/sanDiego"

## The list of subjects onthe followin line was generated by running the makeListOfSubjects.r R script
#subjects="105_A 106_A 106_C 107_A 108_A 109_A 111_A 111_C 112_A 112_C 113_A 114_A 114_C 116_A 117_A 117_A1 117_A2 117_C 118_A 118_C 118_C2 119_A 120_A 120_C 121_A 122_A 123_A 124_A 125_A 126_A 127_A 130_A 131_A 132_A 133_A 134_A 135_A 136_A 137_A 138_A 139_A 140_A 141_A 142_A 143_A 144_A 144_C 144_C2 145_A 146_A 147_A 147_C 148_A 149_A 149_C 150_A 150_C 151_A 152_A 153_A 154_A 155_A 156_A 157_A 158_A 158_C 159_A 160_A 160_C 161_A 161_C 162_A 163_A 164_A 165_A 167_A 167_C 168_A 300_A 300_C 301_A 301_C 302_A 303_A 304_A 304_C 306_A 307_A 308_A 309_A 309_C 310_A 311_A 311_C 312_A 313_A 313_C 314_A 315_A 315_A2 315_C 316_A 316_C 317_A 317_C 318_A 319_A 320_A 320_C 321_A 322_A 322_C 323_A 323_C 324_A 325_A 326_A 328_A 329_A 330_A 330_C 331_A 332_A 333_A 334_A2 335_A 336_A 336_C 337_A 337_C 338_A 339_A 339_C 341_A 341_C 342_A 343_A 344_A 345_A 346_A 347_A 348_A 348_C 349_A 350_A 351_A 353_A 354_A 355_A 356_A 357_A 357_C 358_A 359_A 360_A 361_A 362_A 363_A 364_A 364_C 365_A 365_C 366_A 366_C 367_A 367_C 368_A 369_A 370_A 371_A 372_A 373_A 374_A 376_A 377_A 378_A 380_A 380_C 382_A 386_A 389_A 389_A2 389_C 390_A 391_A 392_A 392_C 393_A 395_A 396_A 397_A 397_C 398_A 399_A 399_C 400_A 401_A 401_C 402_A 403_A 403_C 404_A 405_A 406_A 406_C 407_A 409_A 410_A 410_C 411_A 412_A 413_A 414_A 414_C 415_A 415_C 417_A 418_A 419_A 419_C 420_A 421_A 422_A 423_A 424_A 425_A"


if [[ $# -gt 0 ]] ; then
    subjects="$*"
else
    subjects="$( cat ../data/config/control.subjectList.txt ../data/config/mdd.subjectList.txt )"
fi

function reconstructAnatomy {
    subject=$1
    dicomTask=FSPGR_SAG_TI550

    subjectDicomContainerDir=$dataRoot/$subject
    if [ -d $subjectDicomContainerDir ] ; then 
	if [ -f $subjectDicomContainerDir/sinfo.txt ] ; then 
	    ## not that the tail -1 in the next line implements that assumption
	    ## that in the case of their being multiple runs of the same task that
	    ## the final one is the correct one to use
	    sdir=$( cat $subjectDicomContainerDir/sinfo.txt | grep -i $dicomTask | tail -1 | awk '{print $1}' )
	else 
	    (cd $subjectDicomContainerDir; ../scheck )
	    #echo "*** Could not find $subjectDicomContainerDir/sinfo.txt from which to determine the correct s-directory containing the DICOMS for the $task task"
	    #echo "*** Please provide the s-directory name (enter Ctrl-C to quit at this point if you do not know the correct s-directory)"
	    #read sdir
	    ##echo "** There are ${#sdir} characters in the entered text"
	    ##exit
	fi

	if [ ${#sdir} -gt 0 ] && [ -d  $subjectDicomContainerDir/$sdir ] ; then 
	    echo "*** Resequencing the i files in $subjectDicomContainerDir/$sdir"
	    ( cd $subjectDicomContainerDir/; $scriptsDir/imseq $sdir )
	    
	    session=$dataRoot/${subject}BRIKS
	    if [ ! -d $session ] ; then 
		echo "*** $session does not exist. Creating it now"
		mkdir -p $session
	    fi

	    prefix="$subject"
	    if [ ! -f $session/$prefix+orig.HEAD ] ; then 
		echo "*** Now creating AFNI HEAD/BRIK for T1 anatomy of $subject"
		echo "*** Prefix will be $prefix"
		( cd $subjectDicomContainerDir/$sdir ;  to3d -anat -prefix $prefix -session $session "i*" )
	    else 
		echo "*** $session/$prefix+orig.HEAD already exists. Skipping creation of anatomy"
	    fi

	else
	    echo "*** The s-directory $sdir does not exist or you entered a empty string for it when prompted. Cannot reconstruct anatomy for subject ${subject}. Skipping."
	fi
    else 
	echo "*** Cannot find $subjectDicomContainerDir"
	echo "*** Skipping"
    fi

}


function prepareForFunctionalReconstruction {
    subject=$1
    subjectDicomContainerDir=$dataRoot/$subject
    if [ -d $subjectDicomContainerDir ] ; then 

	( cd $subjectDicomContainerDir; mv e*/* ./ )
	( cd $subjectDicomContainerDir; $scriptsDir/scheck )
	
    else 
	echo "*** Cannot find $subjectDicomContainerDir"
	echo "*** Skipping"
    fi
}

function reconstructFunctional {
    subject=$1

    dicomTask="resting state"
    
    slices="40"
    volumes="256"
    tr="2000"
    
    subjectDicomContainerDir=$dataRoot/$subject
    if [ -d $subjectDicomContainerDir ] ; then 
	if [ -f $subjectDicomContainerDir/sinfo.txt ] ; then 

## not that the tail -1 in the next line implements that assumption
## that in the case of their being multiple runs of the same task that
## the final one is the correct one to use
	    sdir=$( cat $subjectDicomContainerDir/sinfo.txt | grep -i "$dicomTask" | tail -1 | awk '{print $1}' )
	else 
	    (cd $subjectDicomContainerDir; ../scheck )
	    #echo "*** Could not find $subjectDicomContainerDir/sinfo.txt from which to determine the correct s-directory containing the DICOMS for the $task task"
	    #echo "*** Please provide the s-directory name (enter Ctrl-C to quit at this point if you do not know the correct s-directory)"
	    #read sdir
	    ##echo "** There are ${#sdir} characters in the entered text"
	    ##exit
	fi
	if [ ${#sdir} -gt 0 ] && [ -d  $subjectDicomContainerDir/$sdir ] ; then 
	    echo "*** Resequencing the i files in $subjectDicomContainerDir/$sdir"
	    ( cd $subjectDicomContainerDir/; $scriptsDir/imseq $sdir )
	    
	    session=$dataRoot/${subject}BRIKS
	    if [ ! -d $session ] ; then 
		echo "*** $session does not exist. Creating it now"
		mkdir -p $session
	    fi
	    
	    ##prefix="$subject.$task"
	    prefix="$subject$task"
	    echo "*** Now creating AFNI HEAD/BRIK of the ${dicomTask} task for $subject"
	    echo "*** Prefix will be $prefix"
	    ( cd $subjectDicomContainerDir/$sdir ;  to3d -epan -prefix $prefix$nifti -session $session -time:zt $slices $volumes $tr alt+z "i*" )
	    
	else
	    echo "*** The s-directory $sdir does not exist or you entered a empty string for it when prompted. Cannot reconstruct $task task data for subject ${subject}. Skipping."
	fi
    else 
	echo "*** Cannot find $subjectDicomContainerDir"
	echo "*** Skipping"
    fi
}

function linkAnatomy {
    subject=$1
    echo "*** Linking anatomy for $subject"
    
    if [ -f $dataRoot/${subject}BRIKS/${subject}+orig.HEAD ] ; then 
	if [ ! -f $dataRoot/${taskDir}/data/${subject}/${subject}+orig.HEAD ] ; then 
	    ln -sf $dataRoot/${subject}BRIKS/${subject}+orig.HEAD $dataRoot/${taskDir}/data/${subject}/
	fi
    fi
    
    if [ -f $dataRoot/${subject}BRIKS/${subject}+orig.BRIK ] ; then 
	if [ ! -f $dataRoot/${taskDir}/data/${subject}/${subject}+orig.BRIK ] ; then 
	    ln -sf $dataRoot/${subject}BRIKS/${subject}+orig.BRIK $dataRoot/${taskDir}/data/${subject}/
	fi
    else 
	if [ -f $dataRoot/${subject}BRIKS/${subject}+orig.BRIK.gz ] ; then 
		## assume that the gzipped version exists
	    if [ ! -f $dataRoot/${taskDir}/data/${subject}/${subject}+orig.BRIK.gz ] ; then 
		ln -sf $dataRoot/${subject}BRIKS/${subject}+orig.BRIK.gz $dataRoot/${taskDir}/data/${subject}/
	    fi
	fi
    fi

    symlinks -c $dataRoot/${taskDir}/data/${subject}/
}

function linkFunctional {
    subject=$1
    ## name of task in source of link
    src=$2
    ## name of task in destination link
    dest=$3
    
    echo "*** Linking functional for $subject"

    if [ -f  $dataRoot/${subject}BRIKS/${subject}${src}+orig.HEAD ] ; then 
	if [ ! -f $dataRoot/${taskDir}/data/${subject}/${subject}${dest}+orig.HEAD ] ; then 
	    ln -sf $dataRoot/${subject}BRIKS/${subject}${src}+orig.HEAD $dataRoot/${taskDir}/data/${subject}/${subject}${dest}+orig.HEAD
	fi
    fi

    if [ -f $dataRoot/${subject}BRIKS/${subject}${src}+orig.BRIK ] ; then 
	if [ ! -f $dataRoot/${taskDir}/data/${subject}/${subject}${dest}+orig.BRIK ] ; then 
	    ln -sf $dataRoot/${subject}BRIKS/${subject}${src}+orig.BRIK $dataRoot/${taskDir}/data/${subject}/${subject}${dest}+orig.BRIK
	fi
    else 
	if [ -f $dataRoot/${subject}BRIKS/${subject}${src}+orig.BRIK.gz ] ; then 
		## assume that the gzipped version exists
	    if [ ! -f $dataRoot/${taskDir}/data/${subject}/${subject}${dest}+orig.BRIK.gz ] ; then 
		ln -sf $dataRoot/${subject}BRIKS/${subject}${src}+orig.BRIK.gz $dataRoot/${taskDir}/data/${subject}/${subject}${dest}+orig.BRIK.gz
	    fi
	fi
    fi

    symlinks -c $dataRoot/${taskDir}/data/${subject}/
}


noDataDir=""
existingDataDirs=""

for subjectNumber in $subjects ; do

    ## to setup for time point A change C and D to A as appripriate (and vice versa)
    ##    for timepoint in A C ; do
    ##	subjectNumber="${subjectNumber%_*}_${timepoint}"

    timepoint=${subjectNumber##*_}

    echo "####################################################################################################"
    echo "### Timepoint $timepoint: $subjectNumber"
    
    if [ -f $dataRoot/${subjectNumber}.tar.gz ] && [ ! -d $dataRoot/$subjectNumber ] ; then 
	echo "*** Extracting data from tarball. This may take a while"
	( cd $dataRoot; tar xzf $subjectNumber.tar.gz )
    fi

    if [ -d $dataRoot/$subjectNumber ] ; then 
	existingDataDirs="$existingDataDirs $subjectNumber"
	# if [ ! -d $dataRoot/${taskDir}/data/$subjectNumber ] ; then 
	#     mkdir $dataRoot/${taskDir}/data/$subjectNumber
	# fi
	
	# if [ ! -f $dataRoot/$subjectNumber/sinfo.txt ] ; then 
	#     echo "*** Preparing for reconstruction of functional for $subjectNumber"
	#     prepareForFunctionalReconstruction  $subjectNumber
	# fi
	
	# if [ -f $dataRoot/$subjectNumber+orig.HEAD ] ; then 
	#     linkAnatomy $subjectNumber
	# else
	#     echo "*** Trying to reconstruct anatomy for $subjectNumber"
	#     reconstructAnatomy $subjectNumber
	#     linkAnatomy $subjectNumber
	# fi
    else 
	noDataDir="$noDataDir $subjectNumber"
	echo "*** $dataRoot/$subjectNumber does not exist. Skipping"
    fi
    
    ### Now deal with the functional
    ## lc=lower case
    lc_task=$( echo ${task} | tr '[A-Z]' '[a-z]' )
    if [ -f $dataRoot/${subjectNumber}BRIKS/${subjectNumber}${task}+orig.HEAD ] ; then 
	linkFunctional $subjectNumber ${task} ${task}
    elif [ -f $dataRoot/${subjectNumber}BRIKS/${subjectNumber}${lc_task}+orig.HEAD ] ; then 
	linkFunctional $subjectNumber ${lc_task} $task
    else
	## no functional? try to do reconstruction
	
	echo "*** Trying to reconstruct functional for $subjectNumber"
	reconstructFunctional $subjectNumber
	linkFunctional $subjectNumber  ${task} ${task}
    fi
    
    ##    done ## end of for timepoint in C D ; do
done ## end of for subjectNumber in $subjects ; do


echo "####################################################################################################"
echo "Found data directories for:"
echo $existingDataDirs
echo "####################################################################################################"
echo "No data directories for:"
echo $noDataDir

